<?php
namespace App\Services\ExportV2;

use Exception;
use Illuminate\Support\Facades\DB;
use App\Services\Export\ExportService;
use Symfony\Component\HttpFoundation\Request;
use League\Csv\Reader;
use Illuminate\Support\LazyCollection;


class ExportProcessV2
{
    public $user_token = null;
    public $pass_token = null;
    public $sync_id;
    public $old_sync_id;
    public function __construct($data, $sync_id, $old_sync_id)
    {
        if(isset($data['userToken']) && isset($data['userPassToken'])){
            $this->user_token = $data['userToken'];
            $this->pass_token = $data['userPassToken'];
        }
        $this->sync_id = $sync_id;
        $this->old_sync_id = $old_sync_id;
    }

    public function index(){
        if (($this->user_token == Config('microweber.userToken')) && ($this->pass_token == Config('microweber.userPassToken'))) {
            $sync_item = DB::table('product_sync_history_v2')->where('sync_id', $this->sync_id)->first();
            if(isset($sync_item) and $sync_item->data_type== 'products'){
                if($sync_item->action == "CREATE") $this->insert_product_process($sync_item);
                else if($sync_item->action == "UPDATE") $this->update_product_process($sync_item);
                else if($sync_item->action == "DELETE") $this->delete_product_process($sync_item);
                else if($sync_item->action == "REPAIR") $this->repair_product_process($sync_item);
                else if($sync_item->action == "RESTART") $this->restart_product_process($sync_item);
            }else if(isset($sync_item) and $sync_item->data_type== 'categories'){
                if($sync_item->action == "CREATE") $this->insert_category_process($sync_item);
                else if($sync_item->action == "UPDATE") $this->update_category_process($sync_item);
                else if($sync_item->action == "DELETE") $this->delete_category_process($sync_item);
                else if($sync_item->action == "REPAIR") $this->repair_category_process($sync_item);
                else if($sync_item->action == "RESTART") $this->restart_category_process($sync_item);
            }
        }
    }



    // Export to DT Insert process
    public function insert_product_process($data, $params = false){

        if(isset($data) and !empty($data) and $data->type == "url"){
            $source = json_decode($data->data, true);
            DB::table('product_sync_history_v2')->where('sync_id', $data->sync_id)->update(['status' => 'processing']);
            $total_process = count($source);
            if($params){
                $counts_total = 0;
            }else{
                $counts_total = json_decode($data->count, true);
            }
            $header = [];
            for($i =0; $i< $total_process; $i++){
                if($params){
                    //if this repair request
                    $processing_id = $data->processing_id;
                    $reader = Reader::createFromString(file_get_contents($source[$i]));
                    $reader->setDelimiter('|');
                    $csv_data = $reader->setHeaderOffset(0);

                    $header = $csv_data->getHeader();
                    $records = $csv_data->getRecords();

                    $values = collect($records)->toArray();
                    $chunks = array_chunk($values, 1000);
                } else{
                    //if this create request
                    $insert_data = ['source' => $source[$i],
                                    'sync_id' => $data->sync_id,
                                    'count' => $counts_total[$i],
                                    'success_count' => 0,
                                    'error_count' => 0,
                                    'sync_status' => 'processing',
                                    ];
                    $processing_id = DB::table('sync_processing_history_v2')->insertGetId($insert_data);

                    // $dataCsv = file($source[$i]);
                    // $chunks = array_chunk($dataCsv, 1000);
                    ini_set('memory_limit', '-1');<?php
namespace App\Services\ExportV2;

use Exception;
use Illuminate\Support\Facades\DB;
use App\Services\Export\ExportService;
use Symfony\Component\HttpFoundation\Request;
use League\Csv\Reader;
use Illuminate\Support\LazyCollection;


class ExportProcessV2
{
    public $user_token = null;
    public $pass_token = null;
    public $sync_id;
    public $old_sync_id;
    public function __construct($data, $sync_id, $old_sync_id)
    {
        if(isset($data['userToken']) && isset($data['userPassToken'])){
            $this->user_token = $data['userToken'];
            $this->pass_token = $data['userPassToken'];
        }
        $this->sync_id = $sync_id;
        $this->old_sync_id = $old_sync_id;
    }

    public function index(){
        if (($this->user_token == Config('microweber.userToken')) && ($this->pass_token == Config('microweber.userPassToken'))) {
            $sync_item = DB::table('product_sync_history_v2')->where('sync_id', $this->sync_id)->first();
            if(isset($sync_item) and $sync_item->data_type== 'products'){
                if($sync_item->action == "CREATE") $this->insert_product_process($sync_item);
                else if($sync_item->action == "UPDATE") $this->update_product_process($sync_item);
                else if($sync_item->action == "DELETE") $this->delete_product_process($sync_item);
                else if($sync_item->action == "REPAIR") $this->repair_product_process($sync_item);
                else if($sync_item->action == "RESTART") $this->restart_product_process($sync_item);
            }else if(isset($sync_item) and $sync_item->data_type== 'categories'){
                if($sync_item->action == "CREATE") $this->insert_category_process($sync_item);
                else if($sync_item->action == "UPDATE") $this->update_category_process($sync_item);
                else if($sync_item->action == "DELETE") $this->delete_category_process($sync_item);
                else if($sync_item->action == "REPAIR") $this->repair_category_process($sync_item);
                else if($sync_item->action == "RESTART") $this->restart_category_process($sync_item);
            }
        }
    }



    // Export to DT Insert process
    public function insert_product_process($data, $params = false){

        if(isset($data) and !empty($data) and $data->type == "url"){
            $source = json_decode($data->data, true);
            DB::table('product_sync_history_v2')->where('sync_id', $data->sync_id)->update(['status' => 'processing']);
            $total_process = count($source);
            if($params){
                $counts_total = 0;
            }else{
                $counts_total = json_decode($data->count, true);
            }
            $header = [];
            for($i =0; $i< $total_process; $i++){
                if($params){
                    //if this repair request
                    $processing_id = $data->processing_id;
                    $reader = Reader::createFromString(file_get_contents($source[$i]));
                    $reader->setDelimiter('|');
                    $csv_data = $reader->setHeaderOffset(0);

                    $header = $csv_data->getHeader();
                    $records = $csv_data->getRecords();

                    $values = collect($records)->toArray();
                    $chunks = array_chunk($values, 1000);
                } else{
                    //if this create request
                    $insert_data = ['source' => $source[$i],
                                    'sync_id' => $data->sync_id,
                                    'count' => $counts_total[$i],
                                    'success_count' => 0,
                                    'error_count' => 0,
                                    'sync_status' => 'processing',
                                    ];
                    $processing_id = DB::table('sync_processing_history_v2')->insertGetId($insert_data);

                    // $dataCsv = file($source[$i]);
                    // $chunks = array_chunk($dataCsv, 1000);
                    ini_set('memory_limit', '-1');